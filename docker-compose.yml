x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
     - multiline:
         firstline: '^\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2}'
         max_wait_time: 3s
     - regex:
         expression: '^(?P<time>\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2},\d{3}) (?P<message>(?s:.*))$$'

services:
  loki:
    image: grafana/loki:3.0.0
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - stats

  prometheus:
    image: prom/prometheus:v2.51.2
    volumes:
      - ./etc/prometheus:/workspace
    command:
      - --config.file=/workspace/prometheus.yml
      - --enable-feature=exemplar-storage
    depends_on:
      - loki
    logging: *default-logging
    networks:
      - stats

  grafana:
    image: grafana/grafana:10.4.2
    ports:
      - "3000:3000"
    volumes:
      - ./etc/grafana/data:/var/lib/grafana
      - ./etc/grafana/provisioning:/etc/grafana/provisioning
      - ./etc/dashboards:/etc/grafana/dashboards
    environment:
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "admin"
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    depends_on:
      - loki
      - prometheus
    logging: *default-logging
    networks:
      - postgres
      - backend
      - stats

  postgres:
    container_name: postgres_container
    image: postgres:14.8-alpine3.18
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: "newsdb"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "123Secret_a"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ../2. Init Database:/docker-entrypoint-initdb.d
      - news-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d newsdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - postgres
      - backend
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:7.2
    environment:
      PGADMIN_DEFAULT_EMAIL: "newsuser@news.com"
      PGADMIN_DEFAULT_PASSWORD: "123Secret_a"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - postgres

  newsapi:
    container_name: news-api
    image: ${DOCKER_REGISTRY-}newsapi
    build:
      context: .
      dockerfile: ./NewsAPI/Dockerfile
    environment:
      - DB_HOST=postgres
      - POSTGRES_DB=newsdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123Secret_a
      - APP_NAME = news
    depends_on:
      postgres:
        condition: service_healthy
      loki: 
       condition: service_started
    ports:
      - "8081:8080"
    networks:
      - backend
    healthcheck:
      test: curl --fail http://localhost:8080/health || exit 1
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 5s
    logging: *default-logging


  weather:
    container_name: weather-api
    image: ${DOCKER_REGISTRY-}weather
    build:
      context: .
      dockerfile: ./Weather/Dockerfile
    environment:
      - DB_HOST=postgres
      - POSTGRES_DB=newsdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123Secret_a
      - APP_NAME=weather
    depends_on:
      loki: 
        condition: service_started
      postgres:
        condition: service_healthy
    ports:
      - "8888:80"
    networks:
      - backend
    healthcheck:
      test: curl --fail http://localhost:80/health || exit 1
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 5s
    logging: *default-logging

    
  apigateway:
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "8083:8080"
    networks:
      - backend
      - gate
    healthcheck:
      test: curl --fail http://localhost:8080/healthz || exit 1
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 5s
      
volumes:
  pgadmin-data:
  news-data:

networks:
  postgres:
    driver: bridge
  gate:
   driver: bridge
  stats:
    driver: bridge  
  backend:
    driver: bridge

